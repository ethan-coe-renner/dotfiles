#+TITLE: My Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el

* Straight
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
#+end_src

* Custom Settings
Set seperate custom file so that custom settings don't get overwritten by org-babel-tangle.
#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (if (file-exists-p custom-file)
      (load custom-file))
#+end_src

* Theme
#+begin_src emacs-lisp
  (use-package modus-themes
    :straight t
    :custom
    ;; Add all your customizations prior to loading the themes
    (modus-themes-italic-constructs t)
    (modus-themes-bold-constructs t)
    (modus-themes-region '(bg-only no-extend))
    (modus-themes-lang-checkers '(text-also background straight-underline))
    (modus-themes-paren-match '(bold))
    (modus-themes-mode-line '(moody accented))

    :init
    (modus-themes-load-themes)
    :config
    (modus-themes-load-vivendi)
    :bind ("<f5>" . modus-themes-toggle))

  ;; dashboard
  (use-package dashboard
    :straight t
    :init
    (use-package emacs
      :custom
      (recentf-max-menu-items 25)
      (recentf-max-saved-items 25)
      :config
      (recentf-mode 1)
      )
    :custom
    (initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    (dashboard-startup-banner 'official)
    (dashboard-set-heading-icons t)
    (dashboard-set-file-icons t)
    (dashboard-set-init-info t)
    (dashboard-center-content t)
    (dashboard-items '((recents . 5)(projects . 5)))

    :config
    (dashboard-setup-startup-hook))
#+end_src

* Emacs
This section is for miscellaneous settings which do not belong elsewhere, everything should be commented explaining why it was added.
#+begin_src emacs-lisp
  ;; clean scratch buffer
  (setq initial-scratch-message nil
        initial-major-mode 'text-mode)

  ;; fix sizing errors with tiling window managers
  (setq frame-resize-pixelwise t)
#+end_src

* Backup
#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . "~/.saves")))
  (setq backup-by-copying t)
  (setq delete-old-versions t
	kept-new-versions 6
	kept-old-versions 2
	version-control t)
#+end_src

* General
This section sets up [[https://github.com/noctuid/general.el][general.el]]. This section should not be used to set keybindings (except for the most general ones).
Keybindings should go with their respective packages.
#+begin_src emacs-lisp
  (use-package general
    :straight t
    :config
    (general-auto-unbind-keys)
    (general-evil-setup)

    (general-create-definer leader-key-def
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
    )
#+end_src

* Dired
#+begin_src emacs-lisp
  (use-package dired
    :init
    (global-auto-revert-mode)
    (use-package all-the-icons-dired
      :straight t
      :hook (dired-mode . all-the-icons-dired-mode))

    (use-package dired-x
      :after general
      :general
      (leader-key-def
        "<SPC>" 'dired-jump
        ))
    :custom
    (dired-listing-switches "-ABDgho --group-directories-first")
    (global-auto-revert-non-file-buffers t)
    )
#+end_src

* Minibuffer
#+begin_src emacs-lisp
  (use-package vertico
    :straight t
    :custom
    (vertico-count 20)
    (vertico-resize t)
    :init
    (vertico-mode)
    )

  (use-package savehist
    :straight t
    :after vertico
    :init
    (savehist-mode))

  (use-package orderless
    :straight t
    :after vertico
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion))))
    )

  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    (setq read-extended-command-predicate
          #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))


  (use-package consult
    :straight t
    :after vertico
    :custom
    (consult-project-root-function #'projectile-project-root)
    :config
    (autoload 'projectile-project-root "projectile")

    :general
    (:states '(normal visual)
             "/" 'consult-line)

    (leader-key-def
      "b" 'consult-buffer
      "r" 'consult-recent-file
      "i" 'consult-imenu
      "s" 'consult-ripgrep
      )
    )

  (use-package marginalia
    :straight t
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy))
    :init
    (marginalia-mode)
    )
#+end_src

* Embark
#+begin_src emacs-lisp
  (use-package embark
    :straight t
    :defer t
    :custom
    ;; Optionally replace the key help with a completing-read interface
    (prefix-help-command #'embark-prefix-help-command)
    :general
    ("M-m"  'embark-act)         ;; pick some comfortable binding
    ("C-;" 'embark-dwim)        ;; good alternative: M-.
    ("C-h B" 'embark-bindings) ;; alternative for `describe-bindings'

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  (use-package embark-consult
    :straight t
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

* Terminals
** Vterm
Configuration and setup for [[https://github.com/akermu/emacs-libvterm][vterm]].
#+begin_src emacs-lisp
  (use-package vterm
    :straight t
    :init (use-package vterm-toggle
            :straight t
            :after vterm
            :general
            (leader-key-def
              "t" 'vterm-toggle)
            )
    )
#+end_src
* Org Mode
#+begin_src emacs-lisp
  (use-package org
    :defer t
    :custom
    (org-confirm-babel-evaluate nil)
    (org-src-window-setup 'current-window)
    (org-M-RET-may-split-line nil)
    (org-image-actual-width 400)
    (org-export-with-author "Ethan Coe-Renner")

    (org-default-notes-file (concat org-directory "/notes.org"))

    (org-capture-bookmark nil)


    :general
    ("C-c c" 'org-capture)
    ("C-c a" 'org-agenda)

    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       ))

    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-agenda-files (concat org-directory "/tasks.org"))

    :hook
    (org-mode . org-indent-mode)
    (org-capture-mode . evil-insert-state)
    )
#+end_src
* Literate Calc
#+begin_src emacs-lisp
  (use-package literate-calc-mode
    :straight t)
#+end_src

* EVIL
setup evil and related packages
#+begin_src emacs-lisp
  (use-package evil
    :straight t
    :init
    (global-visual-line-mode 1)

    (use-package undo-tree :straight t
      :custom
      (evil-undo-system 'undo-tree)
      (undo-tree-visualizer-diff t)
      (undo-tree-visualizer-timestamps t)
      :init
      (global-undo-tree-mode)
      )
    (use-package evil-collection
      :straight t
      :init
      :after evil
      :config
      (evil-collection-init))

    (use-package evil-goggles
      :straight t
      :config
      (evil-goggles-mode 1))

    (use-package evil-commentary
      :straight t
      :config
      (evil-commentary-mode 1))

    (use-package evil-snipe
      :straight t
      :init
      (evil-snipe-mode 1)
      (evil-snipe-override-mode 1)
      :custom
      (evil-snipe-scope 'visible)
      (evil-snipe-repeat-scope 'visible)
      :hook (magit-mode . turn-off-evil-snipe-override-mode)
      )

    (use-package evil-multiedit
      :straight t
      :general
      (:states '(normal visual)
               "R" 'evil-multiedit-match-all
               "M-d" 'evil-multiedit-match-and-next
               "M-D" 'evil-multiedit-match-and-prev
               )
      )
    (use-package evil-surround
      :straight t
      :config
      (global-evil-surround-mode 1))

    :custom
    (evil-want-C-u-scroll t)
    (evil-respect-visual-line-mode t)
    (evil-want-keybinding nil)

    :config
    (evil-mode 1)
    (general-def
      "C-M-u" 'universal-argument ;; doesn't work with :general for some reason
      )
    (general-def
      :states 'motion
      "j" 'evil-next-visual-line
      "k" 'evil-previous-visual-line)
    )
#+end_src

* Help
#+begin_src emacs-lisp
  (use-package which-key
    :defer t
    :straight t
    :init (which-key-mode)
    :custom
    (which-key-idle-delay 0.3))

  (use-package helpful
    :straight t
    :general
    (
     "C-h f" 'helpful-callable
     "C-h v" 'helpful-variable
     "C-h k" 'helpful-key
     )
    (leader-key-def
      "h" 'helpful-at-point)
    )

  (use-package define-word
    :straight t
    :general
    ("C-h C-w" 'define-word-at-point)
    )
#+end_src

* Elfeed
Setup for [[https://github.com/skeeto/elfeed][Elfeed]], an RSS reader
#+begin_src emacs-lisp
  (use-package elfeed
    :straight t
    :general
    (leader-key-def
      "r" 'elfeed)
    :custom 
    (elfeed-feeds
     '(
       ;; Blogs
       ("http://daviddfriedman.blogspot.com/atom.xml" blog)
       ("http://www.econlib.org/feed/indexCaplan_xml" blog)
       ("https://nullprogram.com/feed/" blog)
       ("https://feeds.feedburner.com/mrmoneymustache" blog)
       ("https://www.singlelunch.com/feed" blog)
       ("https://www.overcomingbias.com/feed" blog)
       ("https://protesilaos.com/codelog.xml" blog)
       ("https://fasterthanli.me/index.xml", blog)

       ;; Fora
       ("https://www.lesswrong.com/feed.xml?view=curated-rss" forum)

       ;; Comics
       ("https://xkcd.com/rss.xml" comic)
       ("https://www.monkeyuser.com/feed.xml" comic)
       ))
    :hook
    (elfeed-search-mode . elfeed-update) ;; auto update when opened
    )
#+end_src

* Internet
Set default browser to eww.
#+begin_src emacs-lisp
  (use-package eww
    :custom
    (browse-url-browser-function 'eww-browse-url)
    :general
    (leader-key-def
      "w" 'eww)
    )
#+end_src
* Editing
This section contains packages and settings for
non-evil specific editing
#+begin_src emacs-lisp
  ;; Delimiters
  (use-package rainbow-delimiters
    :straight t
    :hook (prog-mode . rainbow-delimiters-mode))

  (show-paren-mode 1)
  (electric-pair-mode 1)
  (setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit)
#+end_src
* Navigation
This section contains packages/configuration for
non-evil-specific navigation
#+begin_src emacs-lisp
  (use-package avy
    :straight t
    :general
    ("C-s" 'avy-goto-char-timer)
    )

  (use-package smartscan
    :straight t
    :hook (prog-mode . smartscan-mode))

  (use-package deadgrep
    :straight t
    :general
    (leader-key-def
      "d" 'deadgrep))

  ;; shift+<arrow> to move between windows
  (windmove-default-keybindings)
#+end_src

* Formatting
Automatic formatting
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :straight t
    :init
    (global-aggressive-indent-mode 1)
    )

  (use-package format-all
    :straight t
    :hook
    (prog-mode . format-all-mode)
    )
#+end_src

* Git
Setup git integration
#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status
    :straight t
    :init
    (use-package forge
      :straight t
      :custom 
      (forge-add-default-bindings nil)
      :after magit)
    (use-package magit-todos
      :straight t
      :init
      (magit-todos-mode 1)

      :after magit)
    :general
    (leader-key-def
      "g" 'magit-status)
    )

  (use-package diff-hl
    :straight t
    :init
    (global-diff-hl-mode))
#+end_src

* Project Management
#+begin_src emacs-lisp
  (use-package projectile
    :straight t
    :custom
    (projectile-switch-project-action #'projectile-dired)
    :config (projectile-mode)
    :general
    (leader-key-def
      "p" 'projectile-command-map
      ))
#+end_src

* Major Modes
Set up major modes for languages, etc
#+begin_src emacs-lisp
  (use-package toml-mode :straight t
    :mode "\\.toml\\'")
  (use-package yaml-mode
    :straight t
    :mode "\\.yml\\'"
    )
  (use-package rustic :straight t)
  (use-package nix-mode :straight t
    :mode "\\.nix\\'")
  
  (use-package json-mode :straight t
    :mode "\\.json\\'")
  
  (use-package kbd-mode
    :straight (kbd-mode :type git :host github :repo "kmonad/kbd-mode")
    :mode "\\.kbd\\'")
  
  (use-package haskell-mode
    :straight t)
  
#+end_src
* Checkers
Set up checkers, i.e. syntax checking, spell checkers, etc
#+begin_src emacs-lisp
  (use-package flycheck
    :straight t
    :custom
    (flycheck-disabled-checkers '(haskell-stack-ghc))
    :defer t
    :init (global-flycheck-mode)
    )
#+end_src
* Completion
#+begin_src emacs-lisp
  (use-package company
    :straight t
    :custom
    (company-minimum-prefix-length 3)
    :hook
    (after-init . global-company-mode)
    )
#+end_src

* LSP
#+begin_src emacs-lisp
  (use-package lsp-mode
    :straight t
    :custom
    (gc-cons-threshold 100000000) ;; set per the lsp-doctor recommendation
    (read-process-output-max (* 1024 1024)) ;; same reason ^
    (lsp-keymap-prefix "C-c l")
    :hook (
           (rustic-mode . lsp)
           (c-mode . lsp)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-ui
    :straight t
    :hook (lsp-mode . lsp-ui-mode)
    :commands lsp-ui-mode)
  (use-package lsp-treemacs
    :straight t
    :after lsp-mode
    :commands lsp-treemacs-errors-list
    :general
    (leader-key-def
      "f" 'treemacs
      ))
#+end_src

* GUI
Set gui settings, theme, fonts, etc
#+begin_src emacs-lisp
  ;; set gnome titlebar to dark
  (setq default-frame-alist '((undecorated . t)))

  ;; disabling useless ui elements
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (setq inhibit-startup-screen t)

  (global-hl-line-mode)
  (use-package pulsar
    :straight t
    ;; TODO: customize which functions trigger pulsing
    :init
    (pulsar-global-mode 1))



  ;; font
  (set-face-attribute 'default nil :font "Fira Code" :height 120)
  (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height 120)

  ;; line numbers
  (setq display-line-numbers 'relative)
  (dolist (mode '(text-mode-hook
                  prog-mode-hook
                  conf-mode-hook
                  rust-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

  ;; modeline
  (use-package moody
    :straight t
    :init
    (use-package rich-minority
      :straight t
      :custom
      (rm-blacklist "")
      :init
      (rich-minority-mode 1)
      )
    :custom
    (x-underline-at-descent-line t)
    :config
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode)
    (moody-replace-eldoc-minibuffer-message-function)
    )

  (use-package rainbow-mode
    :straight t)

  (use-package hl-todo
    :straight t
    :hook
    (prog-mode . hl-todo-mode)
    )
#+end_src
* PDF
#+begin_src emacs-lisp
  (use-package pdf-tools
    :straight t
    :init
    (pdf-loader-install)

    ;; set up background with modus themes
    (defun my-pdf-tools-backdrop ()
      (face-remap-add-relative
       'default
       `(:background ,(modus-themes-color 'bg-alt))))

    (add-hook 'pdf-tools-enabled-hook #'my-pdf-tools-backdrop)
    (defun my-pdf-tools-backdrop ()
      (face-remap-add-relative
       'default
       `(:background ,(modus-themes-color 'bg-alt))))

    (defun my-pdf-tools-midnight-mode-toggle ()
      (when (derived-mode-p 'pdf-view-mode)
        (if (eq (car custom-enabled-themes) 'modus-vivendi)
            (pdf-view-midnight-minor-mode 1)
          (pdf-view-midnight-minor-mode -1))
        (my-pdf-tools-backdrop)))

    (defun my-pdf-tools-themes-toggle ()
      (mapc
       (lambda (buf)
         (with-current-buffer buf
           (my-pdf-tools-midnight-mode-toggle)))
       (buffer-list)))

    (add-hook 'pdf-tools-enabled-hook #'my-pdf-tools-midnight-mode-toggle)
    (add-hook 'modus-themes-after-load-theme-hook #'my-pdf-tools-themes-toggle)
    )

#+end_src

# Local Variables: 
# eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t) 
# End:
