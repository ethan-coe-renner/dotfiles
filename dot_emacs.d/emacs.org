#+TITLE: My Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el

* Straight
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
#+end_src

* Custom Settings
Set seperate custom file so that custom settings don't get overwritten by org-babel-tangle.
#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (if (file-exists-p custom-file)
      (load custom-file))

  ;; set all themes as safe
  (custom-set-variables
   '(custom-safe-themes t))
#+end_src

* Theme
#+begin_src emacs-lisp
  (use-package ef-themes
	:straight t

	:config
	(ef-themes-select 'ef-bio)
	)
#+end_src

* Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
	:straight t
	:init
	(use-package emacs
	  :custom
	  (recentf-max-menu-items 25)
	  (recentf-max-saved-items 25)
	  :config
	  (recentf-mode 1)
	  )
	:custom
	(initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
	(dashboard-startup-banner 'official)
	(dashboard-set-heading-icons t)
	(dashboard-set-file-icons t)
	(dashboard-set-init-info t)
	(dashboard-center-content t)
	(dashboard-items '((recents . 5)(bookmarks . 10)))

	:config
	(dashboard-setup-startup-hook))
#+end_src

* Emacs
This section is for miscellaneous settings which do not belong elsewhere, everything should be commented explaining why it was added.
#+begin_src emacs-lisp
  ;; clean scratch buffer
  (setq initial-scratch-message nil
        initial-major-mode 'text-mode)

  ;; fix sizing errors with tiling window managers
  ;; (setq frame-resize-pixelwise t)

  (setq-default fill-column 80)

  (global-display-fill-column-indicator-mode)

  (setq-default tab-width 4)
  (defvaralias 'c-basic-offset 'tab-width)

  (setq delete-by-moving-to-trash t)
  (defun system-move-file-to-trash (filename)
    (shell-command (concat (if (executable-find "rip") (executable-find "rip") (executable-find "rm")) " " filename)))

  ;; PATH setup
  ;; (setenv "PATH" (concat (getenv "PATH") ":~/.cargo/bin"))
  ;; (setq exec-path (append exec-path '("~/.cargo/bin")))
  (defun set-exec-path-from-shell-PATH ()
    "Set up Emacs' `exec-path' and PATH environment variable to match
  that used by the user's shell.

  This is particularly useful under Mac OS X and macOS, where GUI
  apps are not started from a shell."
    (interactive)
    (let ((path-from-shell (replace-regexp-in-string
                            "[ \t\n]*$" "" (shell-command-to-string
                                            "$SHELL --login -c 'echo $PATH'"
                                            ))))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell path-separator))))

  (set-exec-path-from-shell-PATH)
#+end_src

* Backup
#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . "~/.saves")))
  (setq backup-by-copying t)
  (setq delete-old-versions t
	kept-new-versions 6
	kept-old-versions 2
	version-control t)
#+end_src

* General
This section sets up [[https://github.com/noctuid/general.el][general.el]]. This section should not be used to set keybindings (except for the most general ones).
Keybindings should go with their respective packages.
#+begin_src emacs-lisp
    (use-package general
      :straight t
      :config
      (general-auto-unbind-keys)
      (general-evil-setup)

      (general-create-definer leader-key-def
        :keymaps '(normal insert visual emacs)
        :prefix "SPC"
        :global-prefix "C-SPC")
      )

  (use-package emacs
    :general
    (
     "C-w m" 'maximize-window
     )
    (leader-key-def
      "w" 'ace-window
      "ff" 'make-frame
      "fo" 'other-frame)
    )

#+end_src

* Org Mode
#+begin_src emacs-lisp
  (use-package org
    :defer t
    :custom
    (org-confirm-babel-evaluate nil)
    (org-src-window-setup 'current-window)
    (org-M-RET-may-split-line nil)
    (org-image-actual-width 400)
    (org-export-with-author "Ethan Coe-Renner")

    (org-default-notes-file (concat org-directory "/notes.org"))

    (org-capture-bookmark nil)
    (org-todo-keywords
     '((sequence "TODO" "INPROGRESS" "|" "DONE")))

    (org-log-repeat nil)


    :general
    ("C-c c" 'org-capture)

    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       ))

    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))

    :hook
    (org-capture-mode . evil-insert-state)
    )
#+end_src
* Dired
#+begin_src emacs-lisp
  (use-package all-the-icons
	:straight t)

  (use-package dired-preview
	:straight t
	:custom
	(dired-preview-delay 0.7)
	(dired-preview-ignored-extensions-regexp
	 (concat "\\."
			 "\\(gz\\|"
			 "zst\\|"
			 "tar\\|"
			 "xz\\|"
			 "rar\\|"
			 "zip\\|"
			 "iso\\|"
			 "epub"
			 "\\)"))
	:general
	(:keymaps 'dired-mode-map
			  "C-c p" 'dired-preview-mode)
	)
#+end_src

* Minibuffer
#+begin_src emacs-lisp
  (use-package vertico
    :straight t
    :custom
    (vertico-count 20)
    (vertico-resize t)
    :init
    (vertico-mode)
    )

  ;; Configure directory extension.
  ;; (use-package vertico-directory
  ;;   :after vertico
  ;;   :ensure nil
  ;;   ;; More convenient directory navigation commands
  ;;   :bind (:map vertico-map
  ;;               ("RET" . vertico-directory-enter)
  ;;               ("DEL" . vertico-directory-delete-char)
  ;;               ("M-DEL" . vertico-directory-delete-word))
  ;;   ;; Tidy shadowed file names
  ;;   :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))


  (use-package savehist
    :straight t
    :after vertico
    :init
    (savehist-mode))

  (use-package orderless
    :straight t
    :after vertico
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion))))
    )

  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    (setq read-extended-command-predicate
          #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))


  (use-package consult
    :straight t
    :after vertico
    :custom
    (consult-project-root-function #'projectile-project-root)
    :config
    (autoload 'projectile-project-root "projectile")

    :general
    (:states '(normal visual)
             "/" 'consult-line)

    (leader-key-def
      "b" 'consult-buffer
      "B" 'consult-bookmark
      "r" 'consult-recent-file
      "i" 'consult-imenu
      "s" 'consult-ripgrep
      )
    )

  (use-package marginalia
    :straight t
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy))
    :init
    (marginalia-mode)
    )
#+end_src

* Embark
#+begin_src emacs-lisp
  (use-package embark
    :straight t
    :defer t
    :custom
    ;; Optionally replace the key help with a completing-read interface
    (prefix-help-command #'embark-prefix-help-command)
    :general
    ("M-m"  'embark-act)         ;; pick some comfortable binding
    ("C-;" 'embark-dwim)        ;; good alternative: M-.
    ("C-h B" 'embark-bindings) ;; alternative for `describe-bindings'

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  (use-package embark-consult
    :straight t
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

* Literate Calc
#+begin_src emacs-lisp
  (use-package literate-calc-mode
    :straight t)
#+end_src

* EVIL
setup evil and related packages
#+begin_src emacs-lisp
  (use-package evil
    :straight t
    :init
    (global-visual-line-mode 1)

    (use-package undo-tree :straight t
      :custom
      (evil-undo-system 'undo-tree)
      (undo-tree-visualizer-diff t)
      (undo-tree-visualizer-timestamps t)
      (undo-tree-auto-save-history nil)
      :init
      (global-undo-tree-mode)
      )
    (use-package evil-collection
      :straight t
      :after evil
      :config
      (evil-collection-init))

    (use-package evil-goggles
      :straight t
      :config
      (evil-goggles-mode 1))

    (use-package evil-commentary
      :straight t
      :config
      (evil-commentary-mode 1))

    (use-package evil-snipe
      :straight t
      :init
      (evil-snipe-mode 1)
      (evil-snipe-override-mode 1)
      :custom
      (evil-snipe-scope 'visible)
      (evil-snipe-repeat-scope 'visible)
      :hook (magit-mode . turn-off-evil-snipe-override-mode)
      )

    (use-package evil-multiedit
      :straight t
      :general
      (:states '(normal visual)
               "R" 'evil-multiedit-match-all
               "M-d" 'evil-multiedit-match-and-next
               "M-D" 'evil-multiedit-match-and-prev
               )
      )
    (use-package evil-surround
      :straight t
      :config
      (global-evil-surround-mode 1))

    :custom
    (evil-want-C-u-scroll t)
    (evil-respect-visual-line-mode t)
    (evil-want-keybinding nil)

    :config
    (evil-mode 1)
    (general-def
      "C-M-u" 'universal-argument ;; doesn't work with :general for some reason
      )

    ;; This would make j and k operate on visual lines (wrapped lines), this kinda messes up macros (when the partial execution of a macro causes a wrap, subsequent j/k will do fundamentally different things)
    ;; (general-def
    ;;   :states 'motion
    ;;   "j" 'evil-next-visual-line
    ;;   "k" 'evil-previous-visual-line)
    )
#+end_src

* Help
#+begin_src emacs-lisp
  (use-package which-key
    :defer t
    :straight t
    :init (which-key-mode)
    :custom
    (which-key-idle-delay 0.3))

  (use-package helpful
    :straight t
    :general
    (
     "C-h f" 'helpful-callable
     "C-h v" 'helpful-variable
     "C-h k" 'helpful-key
     )
    (leader-key-def
      "h" 'helpful-at-point)
    )

  (use-package define-word
    :straight t
    :general
    ("C-h C-w" 'define-word-at-point)
    )
#+end_src

* Editing
This section contains packages and settings for
non-evil specific editing
#+begin_src emacs-lisp
  ;; Delimiters
  (use-package rainbow-delimiters
    :straight t
    :hook (prog-mode . rainbow-delimiters-mode))

  (show-paren-mode 1)
  (electric-pair-mode 1)
  (setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit)
#+end_src
* Navigation
This section contains packages/configuration for
non-evil-specific navigation
#+begin_src emacs-lisp
  (use-package avy
    :straight t
    :general
    ("C-s" 'avy-goto-char-timer)
    )

  (use-package smartscan
    :straight t
    :hook (prog-mode . smartscan-mode))

  (use-package deadgrep
    :straight t
    :custom
    (deadgrep-executable "~/.cargo/bin/rg")
  

    :general
    (leader-key-def
      "d" 'deadgrep))

  ;; Which function mode config taken from https://emacsredux.com/blog/2014/04/05/which-function-mode/
  (which-function-mode)
  (setq which-func-unknown "n/a")
  (setq-default header-line-format
                '((which-func-mode ("" which-func-format " "))))
  (setq mode-line-misc-info
        ;; We remove Which Function Mode from the mode line, because it's mostly
        ;; invisible here anyway.
        (assq-delete-all 'which-func-mode mode-line-misc-info))

#+end_src

* Formatting
Automatic formatting
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :straight t
    :init
    (global-aggressive-indent-mode 1)
    )

  (use-package format-all
    :straight t
    :hook
    (prog-mode . format-all-mode)
    )
#+end_src

* Git
Setup git integration
#+begin_src emacs-lisp
  (use-package transient
    :straight t)

  (use-package magit
    :commands magit-status
    :straight t
    :init
    (use-package forge
      :straight t
      :custom
      (forge-add-default-bindings nil)
      :after magit)
    (use-package magit-todos
      :straight t
      :init
      (magit-todos-mode 1)

      :after magit)

    :config
    (progn
      ;; Use difftastic with magit
      ;; taken from this blog post: https://tsdh.org/posts/2022-08-01-difftastic-diffing-with-magit.html
      (defun th/magit--with-difftastic (buffer command)
        "Run COMMAND with GIT_EXTERNAL_DIFF=difft then show result in BUFFER."
        (let ((process-environment
               (cons (concat "GIT_EXTERNAL_DIFF=difft --width="
                             (number-to-string (frame-width)))
                     process-environment)))
          ;; Clear the result buffer (we might regenerate a diff, e.g., for
          ;; the current changes in our working directory).
          (with-current-buffer buffer
            (setq buffer-read-only nil)
            (erase-buffer))
          ;; Now spawn a process calling the git COMMAND.
          (make-process
           :name (buffer-name buffer)
           :buffer buffer
           :command command
           ;; Don't query for running processes when emacs is quit.
           :noquery t
           ;; Show the result buffer once the process has finished.
           :sentinel (lambda (proc event)
                       (when (eq (process-status proc) 'exit)
                         (with-current-buffer (process-buffer proc)
                           (goto-char (point-min))
                           (ansi-color-apply-on-region (point-min) (point-max))
                           (setq buffer-read-only t)
                           (view-mode)
                           (end-of-line)
                           ;; difftastic diffs are usually 2-column side-by-side,
                           ;; so ensure our window is wide enough.
                           (let ((width (current-column)))
                             (while (zerop (forward-line 1))
                               (end-of-line)
                               (setq width (max (current-column) width)))
                             ;; Add column size of fringes
                             (setq width (+ width
                                            (fringe-columns 'left)
                                            (fringe-columns 'right)))
                             (goto-char (point-min))
                             (pop-to-buffer
                              (current-buffer)
                              `(;; If the buffer is that wide that splitting the frame in
                                ;; two side-by-side windows would result in less than
                                ;; 80 columns left, ensure it's shown at the bottom.
                                ,(when (> 80 (- (frame-width) width))
                                   #'display-buffer-at-bottom)
                                (window-width
                                 . ,(min width (frame-width))))))))))))

      (defun th/magit-show-with-difftastic (rev)
        "Show the result of \"git show REV\" with GIT_EXTERNAL_DIFF=difft."
        (interactive
         (list (or
                ;; If REV is given, just use it.
                (when (boundp 'rev) rev)
                ;; If not invoked with prefix arg, try to guess the REV from
                ;; point's position.
                (and (not current-prefix-arg)
                     (or (magit-thing-at-point 'git-revision t)
                         (magit-branch-or-commit-at-point)))
                ;; Otherwise, query the user.
                (magit-read-branch-or-commit "Revision"))))
        (if (not rev)
            (error "No revision specified")
          (th/magit--with-difftastic
           (get-buffer-create (concat "*git show difftastic " rev "*"))
           (list "git" "--no-pager" "show" "--ext-diff" rev))))

      (defun th/magit-diff-with-difftastic (arg)
        "Show the result of \"git diff ARG\" with GIT_EXTERNAL_DIFF=difft."
        (interactive
         (list (or
                ;; If RANGE is given, just use it.
                (when (boundp 'range) range)
                ;; If prefix arg is given, query the user.
                (and current-prefix-arg
                     (magit-diff-read-range-or-commit "Range"))
                ;; Otherwise, auto-guess based on position of point, e.g., based on
                ;; if we are in the Staged or Unstaged section.
                (pcase (magit-diff--dwim)
                  ('unmerged (error "unmerged is not yet implemented"))
                  ('unstaged nil)
                  ('staged "--cached")
                  (`(stash . ,value) (error "stash is not yet implemented"))
                  (`(commit . ,value) (format "%s^..%s" value value))
                  ((and range (pred stringp)) range)
                  (_ (magit-diff-read-range-or-commit "Range/Commit"))))))
        (let ((name (concat "*git diff difftastic"
                            (if arg (concat " " arg) "")
                            "*")))
          (th/magit--with-difftastic
           (get-buffer-create name)
           `("git" "--no-pager" "diff" "--ext-diff" ,@(when arg (list arg))))))

      (transient-define-prefix th/magit-aux-commands ()
        "My personal auxiliary magit commands."
        ["Auxiliary commands"
         ("d" "Difftastic Diff (dwim)" th/magit-diff-with-difftastic)
         ("s" "Difftastic Show" th/magit-show-with-difftastic)])

      (transient-append-suffix 'magit-dispatch "!"
        '("#" "My Magit Cmds" th/magit-aux-commands))

      (define-key magit-status-mode-map (kbd "#") #'th/magit-aux-commands)
      )
    :general
    (leader-key-def
      "g" 'magit-status)
    )

  ;; needed for magit on mac
  (when (eq system-type 'darwin)
    (use-package sqlite3
      :straight t)
    )

  (use-package diff-hl
    :straight t
    :init
    (global-diff-hl-mode))

  (use-package git-modes
    :straight t)
#+end_src

* Project Management
#+begin_src emacs-lisp
  (use-package projectile
    :straight t
    :custom
    (projectile-switch-project-action #'projectile-dired)
    :config (projectile-mode)
    :general
    (leader-key-def
      "p" 'projectile-command-map
      ))
#+end_src

* Major Modes
Set up major modes for languages, etc
#+begin_src emacs-lisp
  (use-package toml-mode :straight t
    :mode "\\.toml\\'")
  (use-package yaml-mode
    :straight t
    :mode "\\.yml\\'"
    )
  (use-package rustic :straight t)
  (use-package nix-mode :straight t
    :mode "\\.nix\\'")

  (use-package json-mode :straight t
    :mode "\\.json\\'")

  (use-package kbd-mode
    :straight (kbd-mode :type git :host github :repo "kmonad/kbd-mode")
    :mode "\\.kbd\\'")

  (use-package haskell-mode
    :straight t)

  (use-package yuck-mode
    :straight t)

  (use-package just-mode
    :straight t)
#+end_src

* Checkers
Set up checkers, i.e. syntax checking, spell checkers, etc
#+begin_src emacs-lisp
  (use-package flycheck
    :straight t
    :custom
    (flycheck-disabled-checkers '(haskell-stack-ghc))
    :defer t
    :init (global-flycheck-mode)
    )
#+end_src
* Completion
#+begin_src emacs-lisp
  (use-package company
    :straight t
    :custom
    (company-minimum-prefix-length 3)
    :hook
    (after-init . global-company-mode)
    )
#+end_src

* LSP
#+begin_src emacs-lisp
  (use-package lsp-mode
    :straight t
    :custom
    (gc-cons-threshold 100000000) ;; set per the lsp-doctor recommendation
    (read-process-output-max (* 1024 1024)) ;; same reason ^
    (lsp-keymap-prefix "C-c l")
    :hook (
           (rustic-mode . lsp)
           (c-mode . lsp)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp
    )

  (use-package lsp-ui
    :straight t
    :hook (lsp-mode . lsp-ui-mode)
    :commands lsp-ui-mode)
  (use-package lsp-treemacs
    :straight t
    :after lsp-mode
    :commands lsp-treemacs-errors-list
      )
#+end_src

* GUI
Set gui settings, theme, fonts, etc
#+begin_src emacs-lisp

  ;; disabling useless ui elements
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (setq inhibit-startup-screen t)

  (global-hl-line-mode)
  (use-package pulsar
    :straight t
    ;; TODO: customize which functions trigger pulsing
    :init
    (pulsar-global-mode 1))



  ;; font
  (set-face-attribute 'default nil :font "Fira Code" :height 120)
  (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height 120)

  ;; line numbers
  (setq display-line-numbers 'relative)
  (dolist (mode '(text-mode-hook
                  prog-mode-hook
                  conf-mode-hook
                  rust-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

  ;;modeline
  (use-package moody
    :straight t
    :init
    (use-package rich-minority
      :straight t
      :custom
      (rm-blacklist "")
      :init
      (rich-minority-mode 1)
      )
    :custom
    (x-underline-at-descent-line t)
    :config
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode)
    (moody-replace-eldoc-minibuffer-message-function)
    )

  (use-package rainbow-mode
    :straight t)

  (use-package hl-todo
    :straight t
    :hook
    (prog-mode . hl-todo-mode)
    )
#+end_src
* PDF
#+begin_src emacs-lisp
  (use-package pdf-tools
    :straight t
    :init
    (pdf-loader-install)

    ;; set up background with modus themes
    (defun my-pdf-tools-backdrop ()
      (face-remap-add-relative
       'default
       `(:background ,(modus-themes-color 'bg-alt))))

    (add-hook 'pdf-tools-enabled-hook #'my-pdf-tools-backdrop)
    (defun my-pdf-tools-backdrop ()
      (face-remap-add-relative
       'default
       `(:background ,(modus-themes-color 'bg-alt))))

    (defun my-pdf-tools-midnight-mode-toggle ()
      (when (derived-mode-p 'pdf-view-mode)
        (if (eq (car custom-enabled-themes) 'modus-vivendi)
            (pdf-view-midnight-minor-mode 1)
          (pdf-view-midnight-minor-mode -1))
        (my-pdf-tools-backdrop)))

    (defun my-pdf-tools-themes-toggle ()
      (mapc
       (lambda (buf)
         (with-current-buffer buf
           (my-pdf-tools-midnight-mode-toggle)))
       (buffer-list)))

    (add-hook 'pdf-tools-enabled-hook #'my-pdf-tools-midnight-mode-toggle)
    (add-hook 'modus-themes-after-load-theme-hook #'my-pdf-tools-themes-toggle)
    )

#+end_src

* RSS
#+begin_src emacs-lisp
  (use-package elfeed
    :straight t
    :custom
    (elfeed-feeds '(
                    ;; Blogs
                    ("http://nullprogram.com/feed/" blog)
                    ("https://www.astralcodexten.com/feed" blog)
                    ("https://feeds.feedburner.com/mrmoneymustache" blog)
                    ("https://sourcehut.org/blog/index.xml" blog)
                    ("https://drewdevault.com/blog/index.xml" blog)

                    ;; Multi feeds
                    "https://planet.emacslife.com/atom.xml"

                    ;; Comics
                    ("https://xkcd.com/atom.xml" comic)
                    ))
    :general
    (leader-key-def
      "n" 'elfeed
      )
    )
#+end_src

# Local Variables: 
# eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t) 
# End:

