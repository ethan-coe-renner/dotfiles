#+TITLE: My Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el

* Straight
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
		 (expand-file-name
		  "straight/repos/straight.el/bootstrap.el"
		  (or (bound-and-true-p straight-base-dir)
			  user-emacs-directory)))
		(bootstrap-version 7))
	(unless (file-exists-p bootstrap-file)
	  (with-current-buffer
		  (url-retrieve-synchronously
		   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
		   'silent 'inhibit-cookies)
		(goto-char (point-max))
		(eval-print-last-sexp)))
	(load bootstrap-file nil 'nomessage))
#+end_src

* Custom Settings
Set seperate custom file so that custom settings don't get overwritten by org-babel-tangle.
#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (if (file-exists-p custom-file)
      (load custom-file))
#+end_src

* Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
	:straight t
	:custom
	(recentf-max-menu-items 25)
	(recentf-max-saved-items 25)
	(initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
	(dashboard-startup-banner 'official)
	(dashboard-set-heading-icons t)
	(dashboard-set-file-icons t)
	(dashboard-set-init-info t)
	(dashboard-center-content t)
	(dashboard-items '((recents . 5)(bookmarks . 10)))

	:config
	(recentf-mode 1)
	(dashboard-setup-startup-hook))
#+end_src

* Emacs
This section is for miscellaneous settings which do not belong elsewhere, everything should be commented explaining why it was added.
#+begin_src emacs-lisp
  ;; clean scratch buffer
  (setq initial-scratch-message nil
		initial-major-mode 'text-mode)

  ;; fix sizing errors with tiling window managers
  ;; (setq frame-resize-pixelwise t)

  (setq-default fill-column 80)

  (global-display-fill-column-indicator-mode)

  (setq-default tab-width 4)
  (defvaralias 'c-basic-offset 'tab-width)

  (setq delete-by-moving-to-trash t)
  (defun system-move-file-to-trash (filename)
	(shell-command (concat (if (executable-find "rip") (executable-find "rip") (executable-find "rm")) " " filename)))

  ;; PATH setup
  (add-to-list 'exec-path "~/.cargo/bin")
  (add-to-list 'exec-path "~/.local/bin")
#+end_src

** MacOS
These are macos specific settings
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
	(defun set-exec-path-from-shell-PATH ()
	  "Set up Emacs' `exec-path' and PATH environment variable to match
	that used by the user's shell.

	This is particularly useful under Mac OS X and macOS, where GUI
	apps are not started from a shell."
	  (interactive)
	  (let ((path-from-shell (replace-regexp-in-string
							  "[ \t\n]*$" "" (shell-command-to-string
											  "$SHELL --login -c 'echo $PATH'"
											  ))))
		(setenv "PATH" path-from-shell)
		(setq exec-path (split-string path-from-shell path-separator))))

	(set-exec-path-from-shell-PATH)
	)
#+end_src

* Backup
#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . "~/.saves")))
  (setq backup-by-copying t)
  (setq delete-old-versions t
	kept-new-versions 6
	kept-old-versions 2
	version-control t)
#+end_src

* General
This section sets up [[https://github.com/noctuid/general.el][general.el]]. This section should not be used to set keybindings (except for the most general ones).
Keybindings should go with their respective packages.
#+begin_src emacs-lisp
  (use-package general
	:straight t
	:config
	(general-auto-unbind-keys)
	(general-evil-setup)

	(general-create-definer leader-key-def
	  :states 'normal
	  :keymaps 'override
	  :prefix "SPC")
	)

  (use-package emacs
	:general
	(
	 "C-w m" 'maximize-window
	 )
	(leader-key-def
	  "w" 'ace-window)
	)

#+end_src

* Org Mode
#+begin_src emacs-lisp
  (use-package org
	:defer t
	:custom
	;; styling
	(org-pretty-entities t)
	(org-hide-emphasis-markers t)
	(org-ellipsis "â€¦")

	(org-fold-catch-invisible-edits 'show-and-error)

	(org-confirm-babel-evaluate nil)
	(org-src-window-setup 'current-window)
	(org-M-RET-may-split-line nil)
	(org-image-actual-width 400)
	(org-export-with-author "Ethan Coe-Renner")

	(org-capture-bookmark nil)
	(org-todo-keywords
	 '((sequence "TODO" "INPROGRESS" "BLOCKED" "|" "DONE")))

	(org-log-repeat nil)

	:general
	("C-c c" 'org-capture)

	:config
	(set-face-attribute 'org-ellipsis nil :inherit 'default :box nil)

	(setq org-agenda-files '("~/org/todo.org"))
	(org-babel-do-load-languages
	 'org-babel-load-languages
	 '((emacs-lisp . t)
	   ))

	(require 'org-tempo)
	(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))

	:general
	(leader-key-def "a" 'org-agenda)
	:hook
	(org-capture-mode . evil-insert-state)
	)
  ;; TODO: add org-super-agenda package

  (use-package org-modern
	:straight t
	:custom
	(org-modern-hide-stars nil)
	:after org
	:config
	(with-eval-after-load 'org (global-org-modern-mode))
	)
#+end_src

* Dired
#+begin_src emacs-lisp
  (use-package dired
	:custom
	(dired-dwim-target t)
	:hook
	(dired-mode . dired-hide-details-mode)
	(dired-mode . dired-omit-mode)
	)
#+end_src

* Denote
#+begin_src emacs-lisp
  (use-package denote
	:straight t
	:custom
	(denote-directory "~/notes")
	(denote-dired-directories (list denote-directory))
	(denote-dired-directories-include-subdirectories t)
	(denote-rename-buffer-format "Denote:%t")

	;; TODO: consider more denote keywords
	(denote-known-keywords '("emacs" "dev"))
	(denote-sort-keywords t)

	(denote-date-prompt-use-org-read-date t)

	(denote-backlinks-show-context t)
	:hook
	(dired-mode . denote-dired-mode-in-directories)
	:config
	(denote-rename-buffer-mode 1)
	:general
	(leader-key-def
	  "d" 'denote-open-or-create
	  "D" 'denote
	  )
	)
#+end_src

* Eshell
#+begin_src emacs-lisp
  (use-package eshell
	:config
	(defun eshell-other-window ()
	  "Open a `eshell' in a new window."
	  (interactive)
	  (let ((buf (eshell)))
		(switch-to-buffer (other-buffer buf))
		(switch-to-buffer-other-window buf)))
	:general
	(leader-key-def
	  "e" 'eshell-other-window
	  )
	)
#+end_src

* Minibuffer
#+begin_src emacs-lisp
  (use-package vertico
	:straight t
	:custom
	(vertico-count 20)
	(vertico-resize t)
	:config
	(vertico-mode)
	)

  (use-package vertico-directory
	:after vertico
	:ensure nil
	;; More convenient directory navigation commands
	:bind (:map vertico-map
				("RET" . vertico-directory-enter)
				("DEL" . vertico-directory-delete-char)
				("M-DEL" . vertico-directory-delete-word))
	;; Tidy shadowed file names
	:hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

  (use-package savehist
    :straight t
    :after vertico
    :config
    (savehist-mode))

  (use-package orderless
    :straight t
    :after vertico
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion))))
    )

  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    (setq read-extended-command-predicate
          #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))


  (use-package consult
    :straight t
    :after vertico
    :custom
    (consult-project-root-function #'projectile-project-root)
    :config
    (autoload 'projectile-project-root "projectile")

    :general
    (:states '(normal visual)
             "/" 'consult-line)

    (leader-key-def
      "b" 'consult-buffer
      "B" 'consult-bookmark
      "r" 'consult-recent-file
      "i" 'consult-imenu
      "s" 'consult-ripgrep
      )
    )

  (use-package marginalia
    :straight t
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy))
    :config
    (marginalia-mode)
    )
#+end_src

* Embark
#+begin_src emacs-lisp
  (use-package embark
    :straight t
    :defer t
    :custom
    ;; Optionally replace the key help with a completing-read interface
    (prefix-help-command #'embark-prefix-help-command)
    :general
    ("M-m"  'embark-act)         ;; pick some comfortable binding
    ("C-;" 'embark-dwim)        ;; good alternative: M-.
    ("C-h B" 'embark-bindings) ;; alternative for `describe-bindings'

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  (use-package embark-consult
    :straight t
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

* Literate Calc
#+begin_src emacs-lisp
  (use-package literate-calc-mode
    :straight t)
#+end_src

* EVIL
setup evil and related packages
#+begin_src emacs-lisp
  (use-package evil
	:straight t
	:config
	(use-package undo-tree :straight t
	  :custom
	  (evil-undo-system 'undo-tree)
	  (undo-tree-visualizer-diff t)
	  (undo-tree-visualizer-timestamps t)
	  (undo-tree-auto-save-history nil)
	  :config
	  (global-undo-tree-mode)
	  )
	(use-package evil-collection
	  :straight t
	  :after evil
	  :config
	  (evil-collection-init))

	(use-package evil-goggles
	  :straight t
	  :config
	  (evil-goggles-mode 1))

	(use-package evil-commentary
	  :straight t
	  :config
	  (evil-commentary-mode 1))

	(use-package evil-snipe
	  :straight t
	  :config
	  (evil-snipe-mode 1)
	  (evil-snipe-override-mode 1)
	  :custom
	  (evil-snipe-scope 'visible)
	  (evil-snipe-repeat-scope 'visible)
	  :hook (magit-mode . turn-off-evil-snipe-override-mode)
	  )

	(use-package evil-multiedit
	  :straight t
	  :general
	  (:states '(normal visual)
			   "R" 'evil-multiedit-match-all
			   "M-d" 'evil-multiedit-match-and-next
			   "M-D" 'evil-multiedit-match-and-prev
			   )
	  )
	(use-package evil-surround
	  :straight t
	  :config
	  (global-evil-surround-mode 1))

	(evil-mode 1)
	(general-def
	  "C-M-u" 'universal-argument ;; doesn't work with :general for some reason
	  )

	:custom
	(evil-want-C-u-scroll t)
	(evil-respect-visual-line-mode t)
	(evil-want-keybinding nil)

	)
#+end_src

* Help
#+begin_src emacs-lisp
  (use-package which-key
	:straight t
	:config
	(which-key-mode)
	:custom
	(which-key-idle-delay 0.3))

  (use-package helpful
	:straight t
	:general
	(
	 "C-h f" 'helpful-callable
	 "C-h v" 'helpful-variable
	 "C-h k" 'helpful-key
	 )
	(leader-key-def
	  "h" 'helpful-at-point)
	)

  (use-package define-word
	:straight t
	:general
	("C-h C-w" 'define-word-at-point)
	)

  (use-package devdocs
	:straight t
	:general
	(leader-key-def
	  "l" 'devdocs-lookup)
	:hook
	(c-mode . (lambda () (setq-local devdocs-current-docs '("c"))))
	(python-mode . (lambda () (setq-local devdocs-current-docs '("python~3.12"))))
	)
#+end_src

* Editing
This section contains packages and settings for
non-evil specific editing
#+begin_src emacs-lisp
  ;; Delimiters
  (use-package rainbow-delimiters
    :straight t
    :hook (prog-mode . rainbow-delimiters-mode))

  (show-paren-mode 1)
  (electric-pair-mode 1)
  (setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit)
#+end_src
* Navigation
This section contains packages/configuration for
non-evil-specific navigation
#+begin_src emacs-lisp
  (use-package avy
    :straight t
    :general
    ("C-s" 'avy-goto-char-timer)
    )

  (use-package smartscan
    :straight t
    :hook (prog-mode . smartscan-mode))

  (use-package deadgrep
    :straight t
    :custom
    (deadgrep-executable "~/.cargo/bin/rg")

    :general
    (leader-key-def
      "f" 'deadgrep))

  (which-function-mode)
  (setq which-func-unknown "n/a")

  ;; prefer ripgrep > ugrep > grep for xref
  (setq xref-search-program
		(cond
		 ((or (executable-find "ripgrep")
			  (executable-find "rg"))
		  'ripgrep)
		 ((executable-find "ugrep")
		  'ugrep)
		 (t
		  'grep)))
#+end_src

* Formatting
Automatic formatting
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :straight t
    :config
    (global-aggressive-indent-mode 1)
    )

  (use-package format-all
    :straight t
    :hook
    (prog-mode . format-all-mode)
    )
#+end_src

* Git
Setup git integration
#+begin_src emacs-lisp
  (use-package transient
	:straight t)

  (use-package magit
	:commands magit-status
	:straight t
	:config
	(use-package magit-todos
	  :straight t
	  :config
	  (magit-todos-mode 1)

	  :after magit)

	(when (eq system-type 'darwin)
	  ;; needed for magit on mac
	  (use-package sqlite3
		:straight t)
	  )
	:general
	(leader-key-def
	  "g g" 'magit-status
	  "g b" 'magit-blame
	  "g l" 'magit-log
	  )
	)

  (use-package diff-hl
	:straight t
	:config
	(global-diff-hl-mode))

  (use-package git-modes
	:straight t)

  (use-package git-timemachine
	:straight t
	:config
	(eval-after-load 'git-timemachine
	  '(progn
		 (evil-make-overriding-map git-timemachine-mode-map 'normal)
		 ;; force update evil keymaps after git-timemachine-mode loaded
		 (add-hook 'git-timemachine-mode-hook #'evil-normalize-keymaps)))
	)
#+end_src

* Project Management
#+begin_src emacs-lisp
  (use-package projectile
	:straight t
	:demand t
	:config
	(projectile-mode +1)

	:custom
	(projectile-switch-project-action #'projectile-dired)
	:general
	(leader-key-def
	  "p" 'projectile-command-map
	  ))
#+end_src

* Major Modes
Set up major modes for languages, etc
#+begin_src emacs-lisp
  (use-package toml-mode :straight t
    :mode "\\.toml\\'")
  (use-package yaml-mode
    :straight t
    :mode "\\.yml\\'"
    )
  (use-package rustic :straight t)
  (use-package nix-mode :straight t
    :mode "\\.nix\\'")

  (use-package json-mode :straight t
    :mode "\\.json\\'")

  (use-package kbd-mode
    :straight (kbd-mode :type git :host github :repo "kmonad/kbd-mode")
    :mode "\\.kbd\\'")

  (use-package haskell-mode
    :straight t)

  (use-package yuck-mode
    :straight t)

  (use-package just-mode
    :straight t)
#+end_src

* Checkers
Set up checkers, i.e. syntax checking, spell checkers, etc
#+begin_src emacs-lisp
  (use-package flycheck
    :straight t
    :custom
    (flycheck-disabled-checkers '(haskell-stack-ghc))
    :config (global-flycheck-mode)
    )
#+end_src

* Completion
#+begin_src emacs-lisp
  (use-package company
    :straight t
    :custom
    (company-minimum-prefix-length 3)
    :hook
    (after-init . global-company-mode)
    )
#+end_src

* GUI
Set gui settings, theme, fonts, etc
#+begin_src emacs-lisp
  ;; disabling useless ui elements
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (setq inhibit-startup-screen t)

  (use-package all-the-icons
	:straight t
	)

  (use-package idle-highlight-mode
	:straight t
	:custom
	(idle-highlight-idle-time 0.2)

	:hook
	((prog-mode text-mode) . idle-highlight-mode)
	)

  (use-package lin
	:straight t
	:custom
	(lin-face 'lin-green)
	(setq lin-mode-hooks
		  '(
			dired-mode-hook
			elfeed-search-mode-hook
			git-rebase-mode-hook
			grep-mode-hook
			ibuffer-mode-hook
			ilist-mode-hook
			log-view-mode-hook
			magit-log-mode-hook
			occur-mode-hook
			org-agenda-mode-hook
			proced-mode-hook
			tabulated-list-mode-hook))
	:config
	(lin-global-mode 1))

  (use-package pulsar
	:straight t
	;; TODO: customize which functions trigger pulsing
	:config
	(pulsar-global-mode 1))

  ;; font
  (set-face-attribute 'default nil :font "Fira Code" :height 120)
  (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height 120)

  ;; line numbers
  (dolist (mode '(text-mode-hook
				  prog-mode-hook
				  conf-mode-hook
				  rust-mode-hook))
	(add-hook mode (lambda () (setq display-line-numbers 'relative))))

  ;;modeline
  (use-package rich-minority
	:straight t
	:custom
	(rm-blacklist "")
	:config
	(rich-minority-mode 1)
	)

  (use-package moody
	:straight t
	:custom
	(x-underline-at-descent-line t)
	:config
	(moody-replace-mode-line-front-space)
	(moody-replace-mode-line-buffer-identification)
	(moody-replace-vc-mode)
	(moody-replace-eldoc-minibuffer-message-function)
	)

  (use-package rainbow-mode
	:straight t)

  (use-package hl-todo
	:straight t
	:hook
	(prog-mode . hl-todo-mode)
	)
#+end_src

* RSS
#+begin_src emacs-lisp
  (use-package elfeed
    :straight t
    :custom
    (elfeed-feeds '(
                    ;; Blogs
                    ("http://nullprogram.com/feed/" blog)
                    ("https://www.astralcodexten.com/feed" blog)
                    ("https://feeds.feedburner.com/mrmoneymustache" blog)
                    ("https://sourcehut.org/blog/index.xml" blog)
                    ("https://drewdevault.com/blog/index.xml" blog)

                    ;; Multi feeds
                    "https://planet.emacslife.com/atom.xml"

                    ;; Comics
                    ("https://xkcd.com/atom.xml" comic)
                    ))
    :general
    (leader-key-def
      "n" 'elfeed
      )
    )
#+end_src

* Theme
#+begin_src emacs-lisp
  (use-package ef-themes
	:straight t
	:demand t
	:custom
	(ef-themes-to-toggle '(ef-bio ef-spring))
	:config
	;; Disable all other themes to avoid awkward blending:
	(mapc #'disable-theme custom-enabled-themes)

	(ef-themes-select 'ef-bio)

	:general
	("C-c t" 'ef-themes-toggle)
	)
#+end_src

# Local Variables: 
# eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t) 
# End:
